name: Terraform Validation and Linting
on:
  pull_request:
    branches:
      - main
      - master

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    runs-on: ubuntu-latest
    name: terraform fmt check
    outputs:
      CHECK_STATUS: ${{ steps.fmt_check.outputs.check_status }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Fetch changed files
        id: pr_files
        uses: jitterbit/get-changed-files@v1
        with:
          format: "space-delimited"
      - name: Configure terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.4
      - name: Validate terraform fmt (added_modified)
        id: fmt_check
        run: |
          set +e
          CHECK_STATUS=0

          for changed_file in ${{ steps.pr_files.outputs.added_modified }}; do
            echo "Checking terraform fmt on ${changed_file}..."

            if [[ $changed_file == *.tf ]]; then
              terraform fmt -check $changed_file
              FMT_STATUS=$?

              if [[ $FMT_STATUS -ne 0 ]]; then
                echo "terraform fmt failed - ${changed_file}" >> $GITHUB_STEP_SUMMARY
                CHECK_STATUS=1
              fi
            fi
          done
          
          echo "check_status=$CHECK_STATUS" >> $GITHUB_OUTPUT
      - name: Process check
        if: always()
        run: exit ${{ steps.fmt_check.outputs.check_status }}

  terraform-validate:
    runs-on: ubuntu-latest
    name: terraform validate
    steps:
      - uses: actions/checkout@v3
      - name: Configure terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.4
      - name: Terraform Init (Backend disabled for CI)
        run: terraform init -backend=false
      - name: Terraform Validate
        run: terraform validate
      - name: Terraform Plan (Syntax Check Only)
        run: terraform plan -input=false
        env:
          ARM_SUBSCRIPTION_ID: "00000000-0000-0000-0000-000000000000"
          ARM_TENANT_ID: "00000000-0000-0000-0000-000000000000"
          ARM_CLIENT_ID: "00000000-0000-0000-0000-000000000000"
          ARM_CLIENT_SECRET: "dummy-secret-for-syntax-check"
        continue-on-error: true

  tflint:
    runs-on: ubuntu-latest
    name: tflint check
    steps:
      - uses: actions/checkout@v3
      - name: Cache plugin dir
        uses: actions/cache@v3
        with:
          path: ~/.tflint.d/plugins
          key: ubuntu-latest-tflint-${{ hashFiles('.tflint.hcl') }}
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: v0.44.1
      - name: Show version
        run: tflint --version
      - name: Init TFLint
        run: tflint --init
      - name: Run TFLint
        run: tflint -f compact

  terraform-security-scan:
    runs-on: ubuntu-latest
    name: terraform security scan
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install Checkov
        run: pip install checkov
      - name: Run Checkov security scan
        run: checkov -f main.tf --framework terraform
        continue-on-error: true
      - name: Run Checkov with output
        run: checkov -f main.tf --framework terraform --output cli --output sarif --output-file-path checkov-report.sarif
        continue-on-error: true

  terraform-docs:
    runs-on: ubuntu-latest
    name: terraform docs validation
    steps:
      - uses: actions/checkout@v3
      - name: Setup terraform-docs
        uses: terraform-docs/gh-actions@v1.0.0
        with:
          working-dir: .
          output-file: terraform-docs.md
          output-method: inject
          git-push: false
      - name: Validate terraform-docs
        run: |
          if [ -f terraform-docs.md ]; then
            echo "Terraform documentation generated successfully"
            cat terraform-docs.md
          else
            echo "Failed to generate terraform documentation"
            exit 1
          fi

  terraform-compliance:
    runs-on: ubuntu-latest
    name: terraform compliance check
    steps:
      - uses: actions/checkout@v3
      - name: Configure terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.4
      - name: Terraform Init (Backend disabled for CI)
        run: terraform init -backend=false
      - name: Terraform Plan (JSON)
        run: terraform plan -out=tfplan.binary -input=false
        env:
          ARM_SUBSCRIPTION_ID: "00000000-0000-0000-0000-000000000000"
          ARM_TENANT_ID: "00000000-0000-0000-0000-000000000000"
          ARM_CLIENT_ID: "00000000-0000-0000-0000-000000000000"
          ARM_CLIENT_SECRET: "dummy-secret-for-syntax-check"
        continue-on-error: true
      - name: Convert plan to JSON
        run: terraform show -json tfplan.binary > tfplan.json
        continue-on-error: true
      - name: Setup Python for compliance
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install terraform-compliance
        run: pip install terraform-compliance
      - name: Create basic compliance rules
        run: |
          mkdir -p compliance-rules
          cat > compliance-rules/azure-basics.feature << 'EOF'
          Feature: Azure Resource Basic Compliance
            As a DevOps engineer
            I want to ensure basic Azure resource compliance
            So that my infrastructure follows best practices

            Scenario: Ensure all resources have proper naming
              Given I have azurerm_resource_group defined
              When it contains name
              Then its value should not be null

            Scenario: Ensure resource group has location
              Given I have azurerm_resource_group defined
              When it contains location
              Then its value should not be null

            Scenario: Ensure virtual machine has proper size
              Given I have azurerm_linux_virtual_machine defined
              When it contains size
              Then its value should match "Standard_B1s|Standard_B2s|Standard_D2s_v3"
          EOF
      - name: Run terraform-compliance
        run: terraform-compliance -f compliance-rules -p tfplan.json
        continue-on-error: true
